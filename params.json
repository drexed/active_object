{
  "name": "ActiveObject",
  "tagline": "Gem for commonly used ruby object helpers.",
  "body": "# ActiveObject\r\n\r\n[![Gem Version](https://badge.fury.io/rb/active_object.svg)](http://badge.fury.io/rb/active_object)\r\n[![Build Status](https://travis-ci.org/drexed/active_object.svg?branch=master)](https://travis-ci.org/drexed/active_object)\r\n[![Coverage Status](https://coveralls.io/repos/github/drexed/active_object/badge.svg?branch=master)](https://coveralls.io/github/drexed/active_object?branch=master)\r\n\r\nActiveObject is a collection of commonly used object helpers in a ruby based project.\r\n\r\nHighly recommended extensions:\r\n  * **Hash:** Hashie - https://github.com/intridea/hashie\r\n  * **String:** Escape Utils - https://github.com/brianmario/escape_utils\r\n  * **String:** Fast Blank - https://github.com/SamSaffron/fast_blank\r\n  * **Translation:** Fast Gettext - https://github.com/grosser/fast_gettext\r\n  * **Facets:** Facets - https://github.com/rubyworks/facets\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'active_object'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install active_object\r\n\r\n## Table of Contents\r\n\r\n* [Configuration](#configuration)\r\n* [Array](#array)\r\n* [Enumerable](#enumerable)\r\n* [Hash](#hash)\r\n* [Integer](#integer)\r\n* [Numeric](#numeric)\r\n* [Object](#object)\r\n* [Range](#Rrange)\r\n* [String](#string)\r\n* [Time](#time)\r\n\r\n## Configuration\r\n\r\n`rails g active_object:install` will generate the following `active_object.rb` file:\r\n\r\n```ruby\r\n# config/initalizers/active_object.rb\r\n\r\nActiveObject.configure do |config|\r\n  # option = default\r\n\r\n  config.autoload_array = true\r\n  config.autoload_date = true\r\n  config.autoload_enumerable = true\r\n  config.autoload_hash = true\r\n  config.autoload_integer = true\r\n  config.autoload_numeric = true\r\n  config.autoload_object = true\r\n  config.autoload_range = true\r\n  config.autoload_string = true\r\n  config.autoload_time = true\r\nend\r\n```\r\n\r\n## Array\r\n\r\n####After:####\r\n`after` returns the value after the given value.\r\n\r\n```ruby\r\n[\"1\", \"2\", \"3\"].after(\"2\") #=> \"3\"\r\n[\"1\", \"2\", \"3\"].after(\"3\") #=> \"1\"\r\n[\"1\", \"2\", \"3\"].after(\"4\") #=> nil\r\n```\r\n\r\n####Before:####\r\n`before` returns the value before the given value.\r\n\r\n```ruby\r\n[\"1\", \"2\", \"3\"].before(\"2\") #=> \"1\"\r\n[\"1\", \"2\", \"3\"].before(\"1\") #=> \"3\"\r\n[\"1\", \"2\", \"3\"].before(\"4\") #=> nil\r\n```\r\n\r\n####Delete First:####\r\n`delete_first` and `delete_first!` removes the first element from an array. Like Array.shift, but returns the array instead of the removed element.\r\n\r\n```ruby\r\n[\"1\", \"2\", \"3\"].delete_first #=> [\"2\", \"3\"]\r\n```\r\n\r\n####Delete Last:####\r\n`delete_last` and `delete_last!` removes the last element from an array. Like Array.pop, but returns the array instead of the removed element.\r\n\r\n```ruby\r\n[\"1\", \"2\", \"3\"].delete_last #=> [\"1\", \"2\"]\r\n```\r\n\r\n####Delete Values:####\r\n`delete_values` delete multiple values from array.\r\n\r\n```ruby\r\n[1, 2, 3, 4].delete_values(1, 3) #=> [2, 4]\r\n```\r\n\r\n####Dig:####\r\n`dig` returns the value of a nested array.\r\n\r\n```ruby\r\n[\"zero\", [\"ten\", \"eleven\", \"twelve\"], \"two\"].dig(1, 2) #=> \"twelve\"\r\n```\r\n\r\n####Duplicates:####\r\n`duplicates` returns list of duplicate elements.\r\n\r\n```ruby\r\n[1, 1, 2, 2, 2, 3].duplicates    #=> [1, 2]\r\n[1, 1, 2, 2, 2, 3].duplicates(3) #=> [2]\r\n```\r\n\r\n####From:####\r\n`from` returns the tail of the array from position.\r\n\r\n```ruby\r\n[\"1\", \"2\", \"3\"].from(0) #=> [\"1\", \"2\", \"3\"]\r\n[\"1\", \"2\", \"3\"].from(1) #=> [\"2\", \"3\"]\r\n[\"1\", \"2\", \"3\"].from(-1) #=> [\"3\"]\r\n```\r\n\r\n####Groups:####\r\n`groups` splits or iterates over the array in number of groups.\r\n\r\n```ruby\r\n%w(1 2 3 4 5 6 7 8 9 10).groups(3) #=> [[\"1\", \"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\"], [\"8\", \"9\", \"10\"]]\r\n```\r\n\r\n####In Groups:####\r\n`in_groups` splits or iterates over the array in number of groups, padding any remaining slots with fill_with unless it is false.\r\n\r\n```ruby\r\n%w(1 2 3 4 5 6 7 8 9 10).in_groups(3)           #=> [[\"1\", \"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\", nil], [\"8\", \"9\", \"10\", nil]]\r\n%w(1 2 3 4 5 6 7 8 9 10).in_groups(3, '&nbsp;') #=> [[\"1\", \"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\", \"&nbsp;\"], [\"8\", \"9\", \"10\", \"&nbsp;\"]]\r\n%w(1 2 3 4 5 6 7 8 9 10).in_groups(3, false)    #=> [[\"1\", \"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\"], [\"8\", \"9\", \"10\"]]\r\n```\r\n\r\n####In Groups Of:####\r\n`in_groups_of` splits or iterates over the array in groups of size number, padding any remaining slots with fill_with unless it is false.\r\n\r\n```ruby\r\n%w(1 2 3 4 5 6 7 8 9 10).in_groups_of(3)           #=> [[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"], [\"7\", \"8\", \"9\"], [\"10\", nil, nil]]\r\n%w(1 2 3 4 5 6 7 8 9 10).in_groups_of(3, '&nbsp;') #=> [[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"], [\"7\", \"8\", \"9\"], [\"10\", \"&nbsp;\", \"&nbsp;\"]]\r\n%w(1 2 3 4 5 6 7 8 9 10).in_groups_of(3, false)    #=> [[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"], [\"7\", \"8\", \"9\"], [\"10\"]]\r\n```\r\n\r\n####Percentile:####\r\n`percentile` returns the percentile value for a given percentage.\r\n\r\n```ruby\r\n[1, 2, 3, 4].percentile(49)    # => 2\r\n[1, 2, 3, 4].percentile(50)    # => 3\r\n[1, 2, 3, 4, 5].percentile(50) # => 3\r\n```\r\n\r\n####Probablity:####\r\n`probability` generates a hash mapping each unique element in the array to the relative frequency, i.e. the probablity, of it appearence.\r\n\r\n```ruby\r\n[:a, :b, :c, :c].probability #=> { a: 0.25, b: 0.25, c: 0.5 }\r\n```\r\n\r\n####Reject Values:####\r\n`reject_values` delete multiple values from array from a array copy.\r\n\r\n```ruby\r\n[1, 2, 3, 4, 5].reject_values(2,4) #=> [1, 3, 5]\r\n```\r\n\r\n####Sample:####\r\n`sample!` deletes a random value and returns that value.\r\n\r\n```ruby\r\n[1, 2, 3, 4, 5].sample! #=> 2\r\n```\r\n\r\n####Split:####\r\n`split` divides the array into one or more subarrays based on a delimiting value or the result of an optional block.\r\n\r\n```ruby\r\n[1, 2, 3, 4, 5].split(3)              # => [[1, 2], [4, 5]]\r\n(1..10).to_a.split { |i| i % 3 == 0 } # => [[1, 2], [4, 5], [7, 8], [10]]\r\n```\r\n\r\n####Strip:####\r\n`strip` and `strip!` removes blank elements from an array.\r\n\r\n```ruby\r\n[\"this\", \"\", \"that\", nil, false].strip  #=> [\"this\", \"that\"]\r\n\"this    is   a  test\".split(\" \").strip #=> [\"this\", \"is\", \"a\", \"test\"]\r\n```\r\n\r\n####To:####\r\n`to` returns the beginning of the array up to position.\r\n\r\n```ruby\r\n[\"1\", \"2\", \"3\"].to(0) #=> [\"1\"]\r\n[\"1\", \"2\", \"3\"].to(1) #=> [\"1\", \"2\"]\r\n[\"1\", \"2\", \"3\"].to(-1) #=> [\"3\"]\r\n```\r\n\r\n####To Sentence:####\r\n`to_sentence` converts the array to a comma-separated sentence where the last element is joined by the connector word.\r\n\r\n**Options:**\r\n * words_connector:     “, ”\r\n * two_words_connector: “ and ”\r\n * last_word_connector: “, and ”\r\n\r\n```ruby\r\n[].to_sentence                                                                                     #=> \"\"\r\n[\"one\"].to_sentence                                                                                #=> \"one\"\r\n[\"one\", \"two\"].to_sentence                                                                         #=> \"one and two\"\r\n[\"one\", \"two\", \"three\"].to_sentence                                                                #=> \"one, two, and three\"\r\n[\"one\", \"two\"].to_sentence(two_words_connector: '-')                                               #=> \"one-two\"\r\n[\"one\", \"two\", \"three\"].to_sentence(words_connector: ' or ', last_word_connector: ' or at least ') #=> \"one or two or at least three\"\r\n```\r\n\r\n## Enumerable\r\n\r\n####Cluster:####\r\n`cluster` clusters together adjacent elements into a list of sub-arrays.\r\n\r\n```ruby\r\n[2,2,2,3,3,4,2,2,1].cluster { |x| x } #=> [[2, 2, 2], [3, 3], [4], [2, 2], [1]]\r\n```\r\n\r\n####Difference:####\r\n`difference` returns the difference of a collection of numbers.\r\n\r\n```ruby\r\n[].difference #=> 0\r\n[].difference(nil) #=> nil\r\n[1,2,3].difference #=> -4\r\n```\r\n\r\n####Divisible:####\r\n`divisible` returns the division of a collection of numbers.\r\n\r\n```ruby\r\n[].divisible       #=> 0\r\n[].divisible(nil)  #=> nil\r\n[16,4,2].divisible #=> 2\r\n```\r\n\r\n####Drop Last:####\r\n`drop_last` drops the last number of elements of a collection.\r\n\r\n```ruby\r\n[].drop_last(1)      #=> []\r\n[1,2,3].drop_last(1) #=> [1,2]\r\n[1,2,3].drop_last(2) #=> [1]\r\n```\r\n\r\n####Drop Last If:####\r\n`drop_last_if` drops the last number of elements of a collection while it meets a criteria.\r\n\r\n```ruby\r\n[].drop_last_if(&:odd?)        #=> []\r\n[1,2,3].drop_last_if(&:odd?)   #=> [1,2]\r\n[1,2,3,4].drop_last_if(&:odd?) #=> [1,2,3,4]\r\n```\r\n\r\n####Exactly:####\r\n`exactly?` returns if there are exactly the number of an element type.\r\n\r\n```ruby\r\n[].exactly?(1)                 #=> false\r\n[1,2,3].excatly?(3)            #=> true\r\n[1,1,3,3].exactly?(2, &:even?) #=> false\r\n```\r\n\r\n####Exclude:####\r\n`exclude?` returns true if the collection does not include the object.\r\n\r\n```ruby\r\n[1, 2, 3].exclude?(4) #=> true\r\n[1, 2, 3].exclude?(3) #=> false\r\n```\r\n\r\n####Expand:####\r\n`expand` expand all elements of an Enumerable object.\r\n\r\n```ruby\r\n[0, 2..3, 5..7].expand #=> [0,[2, 3],[5,6,7]]\r\n```\r\n\r\n####Exponential:####\r\n`exponential` returns the exponential of a collection of numbers.\r\n\r\n```ruby\r\n[].exponential      #=> 0\r\n[].exponential(nil) #=> nil\r\n[2,3,4].exponential #=> 4096\r\n```\r\n\r\n####Frequencies:####\r\n`frequencies` returns a hash of the number of times a value in an array appears.\r\n\r\n```ruby\r\n[].frequencies                                    #=> {}\r\n[1, :symbol, 'string', 3, :symbol, 1].frequencies #=> { 1 => 2, :symbol => 2, 'string' => 1, 3 => 1 }\r\n```\r\n\r\n####Incase:####\r\n`incase?` the same as #include? but tested using #=== instead of #==.\r\n\r\n```ruby\r\n[1, 2, \"a\"].incase?(String) #=> true\r\n[1, 2, \"a\"].incase?(3)      #=> false\r\n```\r\n\r\n####Many:####\r\n`many?` returns if collection has more than one element while respecting nil and false as an element.\r\n\r\n```ruby\r\n[].many?                 #=> false\r\n[1,2,3].many?            #=> true\r\n[1, false, nil].many?    #=> true\r\n[1,1,3,3].many?(&:even?) #=> false\r\n\r\n```\r\n\r\n####Max:####\r\n`max` returns the largest value of a collection of numbers.\r\n\r\n```ruby\r\n[].max      #=> 0\r\n[].max(nil) #=> nil\r\n[1,2,3].max #=> 3\r\n```\r\n\r\n####Min:####\r\n`min` returns the smallest value of a collection of numbers.\r\n\r\n```ruby\r\n[].min      #=> 0\r\n[].min(nil) #=> nil\r\n[1,2,3].min #=> 1\r\n```\r\n\r\n####Mean:####\r\n`mean` and `average` returns the average of a collection of numbers.\r\n\r\n```ruby\r\n[].mean      #=> 0\r\n[].mean(nil) #=> nil\r\n[1,2,3].mean #=> 2\r\n```\r\n\r\n####Median:####\r\n`median` returns the middle value of a collection of numbers.\r\n\r\n```ruby\r\n[].median        #=> 0\r\n[].median(nil)   #=> nil\r\n[1,2,6].median   #=> 2\r\n[1,2,3,6].median #=> 2.5\r\n```\r\n\r\n####Mode:####\r\n`mode` returns the most frequent value of a collection of numbers.\r\n\r\n```ruby\r\n[].mode        #=> 0\r\n[].mode(nil)   #=> nil\r\n[1,2,3].mode   #=> nil\r\n[1,1,2,6].mode #=> 1\r\n```\r\n\r\n####Multiple:####\r\n`multiple` returns the multiplication of a collection of numbers.\r\n\r\n```ruby\r\n[].multiple      #=> 0\r\n[].multiple(nil) #=> nil\r\n[1,2,3].multiple #=> 6\r\n```\r\n\r\n####Range:####\r\n`range` returns the difference between the smallest and largest value of a collection of numbers.\r\n\r\n```ruby\r\n[].range      #=> 0\r\n[].range(nil) #=> nil\r\n[1,2,6].range #=> 5\r\n```\r\n\r\n####Several:####\r\n`several?` returns if collection has more than one element while not respecting nil and false as an element.\r\n\r\n```ruby\r\n[].several?                 #=> false\r\n[1,2,3].several?            #=> true\r\n[1, false, nil].several?    #=> false\r\n[1,1,3,3].several?(&:even?) #=> false\r\n```\r\n\r\n####Standard Deviation:####\r\n`standard_deviation` returns the standard deviation of elements of a collection.\r\n\r\n```ruby\r\n[].standard_deviation      #=> 0\r\n[].standard_deviation(nil) #=> nil\r\n[1,2,6].standard_deviation #=> 2.6457513110645907\r\n```\r\n\r\n####Sum:####\r\n`sum` returns the sum of a collection of numbers.\r\n\r\n```ruby\r\n[].sum             #=> 0\r\n[].sum(nil)        #=> nil\r\n[1,2,3].sum        #=> 6\r\n[\"foo\", \"bar\"].sum #=> \"foobar\"\r\n```\r\n\r\n####Take Last:####\r\n`take_last` returns the last number of elements of a collection.\r\n\r\n```ruby\r\n[].take_last(1)      #=> []\r\n[1,2,3].take_last(1) #=> [3]\r\n[1,2,3].take_last(2) #=> [2,3]\r\n```\r\n\r\n####Take Last If:####\r\n`take_last_if` returns the last number of elements of a collection while it meets a criteria.\r\n\r\n```ruby\r\n[].take_last_if(&:odd?)        #=> []\r\n[1,2,3].take_last_if(&:odd?)   #=> [3]\r\n[1,2,3,4].take_last_if(&:odd?) #=> []\r\n```\r\n\r\n####Variance:####\r\n`variance` returns the variance of elements of a collection.\r\n\r\n```ruby\r\n[].variance      #=> 0\r\n[].variance(nil) #=> nil\r\n[1,2,6].variance #=> 7\r\n```\r\n\r\n## Hash\r\n\r\n####Assert Valid Keys:####\r\n`assert_valid_keys` raises an error if key is not included in a list of keys.\r\n\r\n```ruby\r\n{}.assert_valid_keys(:foo)                               #=> {}\r\n{ foo: \"bar\" }.assert_valid_keys(:foo)                   #=> { foo: \"bar\" }\r\n{ foo: \"bar\", baz: \"boz\" }.assert_valid_keys(:foo, :boo) #=> raises \"ArgumentError: Unknown key: :baz. Valid keys are: :foo, :boo\"\r\n```\r\n\r\n####Compact:####\r\n`compact` and `compact!` returns a hash with non nil values.\r\n\r\n```ruby\r\n{}.compact                                   #=> {}\r\n{ foo: nil }.compact                         #=> {}\r\n{ foo: \"bar\", baz: false, boo: nil }.compact #=> { foo: \"bar\", baz: false }\r\n```\r\n\r\n####Deep Merge:####\r\n`deep_merge` and `deep_merge!` returns a new hash with self and other_hash merged recursively.\r\n\r\n```ruby\r\nh1 = { a: true, b: { c: [1, 2, 3] } }\r\nh2 = { a: false, b: { x: [3, 4, 5] } }\r\n\r\nh1.deep_merge(h2) #=> { a: false, b: { c: [1, 2, 3], x: [3, 4, 5] } }\r\n```\r\n\r\n####Dig:####\r\n`dig` returns the value of a nested hash.\r\n\r\n```ruby\r\nh1 = { a: { b: { c: :d } } }\r\n\r\nh1.dig(:a, :b)     #=> { c: :d }\r\nh1.dig(:a, :b, :c) #=> :d\r\n```\r\n\r\n####Except:####\r\n`except` and `except!` returns a hash that includes everything but the given keys.\r\n\r\n```ruby\r\n{}.except(:foo)                                                    #=> {}\r\n{ foo: 'foo', baz: 'baz', bar: 'bar' }.except(:foo)                #=> { baz: 'baz', bar: 'bar' }\r\n{ :foo => 'foo', :baz => 'baz', :bar => 'bar' }.except(:baz, :bar) #=> { :foo => 'foo' }\r\n```\r\n\r\n####Hmap:####\r\n`hmap` and `hmap!` returns a hash that is transformed in place.\r\n\r\n```ruby\r\n{ a: 1, b: 2, c: 3 }.hmap { |k, v| { k => v + 3 } } #=> { a: 4, b: 5, c: 6 }\r\n```\r\n\r\n####Nillify:####\r\n`nillify` and `nillify!` transforms all blank values to nil.\r\n\r\n```ruby\r\n{ a: 1, b: \"test\", c: nil, d: false, e: \"\", f: \" \" }.nillify #=> {a: 1, b: 'test', c: nil, d: nil, e: nil, f: nil}\r\n```\r\n\r\n####Only:####\r\n`only` and `only!` returns only key/value pairs matching certain keys.\r\n\r\n```ruby\r\n{}.only(:foo)                                                    #=> {}\r\n{ foo: 'foo', baz: 'baz', bar: 'bar' }.only(:foo)                #=> { foo: 'foo' }\r\n{ :foo => 'foo', :baz => 'baz', :bar => 'bar' }.only(:baz, :bar) #=> { :baz => 'baz', :bar => 'bar' }\r\n```\r\n\r\n####Rename Keys:####\r\n`rename_keys` and `rename_keys!` rename the keys of a hash.\r\n\r\n```ruby\r\n{ foo: 'foo', baz: 'baz' }.rename_keys(foo: :bar)                      #=> { bar: 'foo', baz: 'baz' }\r\n{ foo: 'foo', 'baz' => 'baz' }.rename_keys(foo: :bar, 'baz' => 'tick') #=> { bar: 'foo', tick: 'baz' }\r\n```\r\n\r\n####Reverse Merge:####\r\n`reverse_merge` and `reverse_merge!` merges one hash into other hash.\r\n\r\n```ruby\r\n{}.reverse_merge!(foo: \"bar\")                         #=> { foo: \"bar\" }\r\n{ foo: \"bar\" }.reverse_merge!(baz: \"boo\", boo: \"bam\") #=> { foo: \"bar\", baz: \"boo\", boo: \"bam\" }\r\n```\r\n\r\n####Sample:####\r\n`sample` returns a random key-value pair.\r\n`sample!` deletes a random key-value pair and returns that pair.\r\n\r\n```ruby\r\nh = { a: 1, b: 2, c: 3, d: 4 }\r\n\r\nh.sample  #=> [:c, 3]\r\nh.sample! #=> [:a, 1]\r\n```\r\n\r\n####Sample Key:####\r\n`sample_key` returns a random key.\r\n`sample_key!` delete a random key-value pair, returning the key.\r\n\r\n```ruby\r\nh = { a: 1, b: 2, c: 3, d: 4 }\r\n\r\nh.sample_key  #=> :b\r\nh.sample_key! #=> :d\r\n```\r\n\r\n####Sample Value:####\r\n`sample_value` returns a random value.\r\n`sample_value!` delete a random key-value pair, returning the value.\r\n\r\n```ruby\r\nh = { a: 1, b: 2, c: 3, d: 4 }\r\n\r\nh.sample_value  #=> 1\r\nh.sample_value! #=> 3\r\n```\r\n\r\n####Shuffle:####\r\n`shuffle` returns a copy of the hash with values arranged in new random order.\r\n`shuffle!` returns the hash with values arranged in new random order.\r\n\r\n```ruby\r\nh = { a: 1, b: 2, c: 3, d: 4 }\r\n\r\nh.shuffle  #=> { b: 2, c: 3, a: 1, d: 4 }\r\nh.shuffle! #=> { d: 4, b: 2, c: 3, a: 1 }\r\n```\r\n\r\n####Slice:####\r\n`slice` a hash to include only the given keys. Returns a hash containing the given keys.\r\n`slice!` replaces the hash with only the given keys. Returns a hash containing the removed key/value pairs.\r\n\r\n```ruby\r\nh = { a: 1, b: 2, c: 3, d: 4 }\r\n\r\nh.slice(:a, :b)  #=> { a: 1, b: 2 }\r\nh.slice!(:a, :b) #=> { c: 3, d: 4 }\r\n```\r\n\r\n####Stringify Keys:####\r\n`stringify_keys` and `stringify_keys!` converts the hash keys to strings.\r\n\r\n```ruby\r\n{ foo: \"foo\", \"bar\" => 'bar' }.stringify_keys #=> { \"foo\" => \"foo\", \"baz\" => \"baz\" }\r\n```\r\n\r\n####Strip:####\r\n`strip` and `strip!` returns a hash with non nil, false, or blank values.\r\n\r\n```ruby\r\n{}.strip                                                      #=> {}\r\n{ foo: nil, baz: false, boo: '', faz: ' ' }.strip             #=> {}\r\n{ foo: \"bar\", baz: false, boo: nil, boz: '', faz: ' ' }.strip #=> { foo: \"bar\" }\r\n```\r\n\r\n####Symbolize Keys:####\r\n`symbolize_keys` and `symbolize_keys!` converts the hash keys to symbols.\r\n\r\n```ruby\r\n{ foo: \"foo\", \"bar\" => \"bar\" }.symbolize_keys #=> { foo: \"foo\", baz: \"baz\" }\r\n```\r\n\r\n####Symbolize and Underscore Keys:####\r\n`symbolize_and_underscore_keys` and `symbolize_and_underscore_keys!` symbolize and underscore hash keys.\r\n\r\n```ruby\r\n{ \"firstName\" => \"foo\", \"last Name\" => \"test\" }.symbolize_and_underscore_keys #=> { first_name: \"foo\", last_name: \"test\" }\r\n```\r\n\r\n####Transform Keys:####\r\n`transform_keys` and `transform_keys!` a new hash with all keys converted using the block operation.\r\n\r\n```ruby\r\n{ foo: \"bar\", baz: \"boo\" }.transform_keys { |k| k.to_s.upcase } #=> { \"FOO\" => \"bar\", \"BAZ\" => \"boo\" }\r\n```\r\n\r\n####Transform Values:####\r\n`transform_values` and `transform_values!` a new hash with all values converted using the block operation.\r\n\r\n```ruby\r\n{ foo: \"bar\", baz: \"boo\" }.transform_values { |v| v.to_s.upcase } #=> {foo: \"BAR\", baz: \"BOO\" }\r\n```\r\n\r\n## Integer\r\n\r\n####Factorial:####\r\n`factorial` calculate the factorial of an integer.\r\n\r\n```ruby\r\n4.factorial #=> 24\r\n```\r\n\r\n####Of:####\r\n`of` is like #times but returns a collection of the yield results.\r\n\r\n```ruby\r\n3.of { |i| \"#{i+1}\" } #=> [\"1\", \"2\", \"3\"]\r\n```\r\n\r\n####Roman:####\r\n`roman` converts this integer to a roman numeral.\r\n\r\n```ruby\r\n49.roman #=> \"XLIX\"\r\n```\r\n\r\n####Time:####\r\n`time` returns a Time object for the given Integer.\r\n\r\n```ruby\r\n3.time #=> \"1969-12-31 19:00:03.000000000 -0500\"\r\n```\r\n\r\n## Numeric\r\n\r\n####Add:####\r\n`add` returns the sum of two numbers.\r\n\r\n```ruby\r\n4.add(2) #=> 6\r\n```\r\n\r\n####Bytes in Bytes:####\r\n`byte_in_bytes` and `bytes_in_bytes` returns self.\r\n\r\n```ruby\r\n3.bytes_in_bytes #=> 3\r\n```\r\n\r\n####Centigrams in Grams:####\r\n`centigram_in_grams` and `centigrams_in_grams` returns the amount of grams in n centigrams.\r\n\r\n```ruby\r\n3.centigrams_in_grams #=> 0.03\r\n```\r\n\r\n####Centimeters in Meters:####\r\n`centimeter_in_meters` and `centimeters_in_meters` returns the amount of meters in n centimeters.\r\n\r\n```ruby\r\n3.centimeters_in_meters #=> 0.03\r\n```\r\n\r\n####Centuries_in_seconds:####\r\n`century_in_seconds` and `centuries_in_seconds` returns the amount of seconds in n centuries.\r\n\r\n```ruby\r\n3.centuries_in_seconds #=> 9467280000.0\r\n```\r\n\r\n####Clamp:####\r\n`clamp` returns a comparable between a lower and upper bound.\r\n\r\n```ruby\r\n1.clamp(3, 6) # => 3\r\n5.clamp(3..6) # => 5\r\n8.clamp(3, 6) # => 6\r\n```\r\n\r\n####Days in Seconds:####\r\n`day_in_seconds` and `days_in_seconds` returns the amount of seconds in n days.\r\n\r\n```ruby\r\n3.days_in_seconds #=> 259200\r\n```\r\n\r\n####Decades in Seconds:####\r\n`decade_in_seconds` and `decades_in_seconds` returns the amount of seconds in n decades.\r\n\r\n```ruby\r\n3.decades_in_seconds #=> 946728000.0\r\n```\r\n####Decagrams in Grams:####\r\n`decagram_in_grams` and `decagrams_in_grams` returns the amount of grams in n decagrams.\r\n\r\n```ruby\r\n3.decagrams_in_grams #=> 30\r\n```\r\n\r\n####Decameters in Meters:####\r\n`decameter_in_meters` and `decameters_in_meters` returns the amount of meters in n decameters.\r\n\r\n```ruby\r\n3.decameters_in_meters #=> 30\r\n```\r\n\r\n####Decigrams in Grams:####\r\n`decigram_in_grams` and `decigrams_in_grams` returns the amount of grams in n decigrams.\r\n\r\n```ruby\r\n3.decigrams_in_grams #=> 0.3\r\n```\r\n\r\n####Decimeters in Meters:####\r\n`decimeter_in_meters` and `decimeters_in_meters` returns the amount of meters in n decimeters.\r\n\r\n```ruby\r\n3.decimeters_in_meters #=> 0.3\r\n```\r\n\r\n####degrees_to_radians:####\r\n`degrees_to_radians` returns number of degrees into radians.\r\n\r\n```ruby\r\n90.degrees_to_radians #=> 1.5707963267948966\r\n```\r\n\r\n####Distance:####\r\n`distance` returns the absolute difference between numbers.\r\n\r\n```ruby\r\n5.distance(3) #=> 2\r\n3.distance(5) #=> 2\r\n```\r\n\r\n####Divide:####\r\n`divide` returns the division of two numbers.\r\n\r\n```ruby\r\n4.divide(2) #=> 2\r\n```\r\n\r\n####Exabytes in Bytes:####\r\n`exabyte_in_bytes` and `exabytes_in_bytes` returns the amount of bytes in n exabytes.\r\n\r\n```ruby\r\n3.exabytes_in_bytes #=> 3458764513820540928\r\n```\r\n\r\n####Feet in Inches:####\r\n`foot_in_inches` and `feet_in_inches` returns the amount of inches in n feet.\r\n\r\n```ruby\r\n3.feet_in_inches #=> 36\r\n```\r\n\r\n####Gigabytes in Bytes:####\r\n`gigabyte_in_bytes` and `gigabytes_in_bytes` returns the amount of bytes in n gigabytes.\r\n\r\n```ruby\r\n3.gigabytes_in_bytes #=> 3221225472\r\n```\r\n\r\n####Grams in Grams:####\r\n`gram_in_grams` and `grams_in_grams` returns self.\r\n\r\n```ruby\r\n3.grams_in_grams #=> 3\r\n```\r\n\r\n####Greater Than:####\r\n`greater_than?` returns true if self is greater than n.\r\n\r\n```ruby\r\n3.greater_than?(2) #=> true\r\n3.greater_than?(3) #=> false\r\n3.greater_than?(4) #=> false\r\n```\r\n\r\n####Greater Than or Equal To:####\r\n`greater_than_or_equal_to?` returns true if self is greater than or equal to n.\r\n\r\n```ruby\r\n3.greater_than_or_equal_to?(2) #=> true\r\n3.greater_than_or_equal_to?(3) #=> true\r\n3.greater_than_or_equal_to?(4) #=> false\r\n```\r\n\r\n####Hectograms in Grams:####\r\n`hectogram_in_grams` and `hectograms_in_grams` returns the amount of grams in n hectograms.\r\n\r\n```ruby\r\n3.hectograms_in_grams #=> 300\r\n```\r\n\r\n####Hectometers in Meters:####\r\n`hectometer_in_meters` and `hectometers_in_meters` returns the amount of meters in n hectometers.\r\n\r\n```ruby\r\n3.hectometers_in_meters #=> 300\r\n```\r\n\r\n####Hours in Seconds:####\r\n`hour_in_seconds` and `hours_in_seconds` returns the amount of seconds in n hours.\r\n\r\n```ruby\r\n3.hours_in_seconds #=> 10800\r\n```\r\n\r\n####Inches in Inches:####\r\n`inch_in_inches` and `inches_in_inches` returns the amount of inches in n inches.\r\n\r\n```ruby\r\n3.inches_in_inches #=> 3\r\n```\r\n\r\n####Inside:####\r\n`inside?` returns true if n is greater than start and less than finish. Similar to between but does not return true if equal to self.\r\n\r\n```ruby\r\n3.inside?(1, 5) #=> true\r\n3.inside?(3, 5) #=> false\r\n```\r\n\r\n####Kilobytes in Bytes:####\r\n`kilobyte_in_bytes` and `kilobytes_in_bytes` returns the amount of bytes in n kilobytes.\r\n\r\n```ruby\r\n3.kilobytes_in_bytes #=> 3072\r\n```\r\n\r\n####Kilograms in Grams:####\r\n`kilogram_in_grams` and `kilograms_in_grams` returns the amount of grams in n kilograms.\r\n\r\n```ruby\r\n3.kilograms_in_grams #=> 3000\r\n```\r\n\r\n####Kilometers in Meters:####\r\n`kilometer_in_meters` and `kilometers_in_meters` returns the amount of meters in n kilometers.\r\n\r\n```ruby\r\n3.kilometers_in_meters #=> 3000\r\n```\r\n\r\n####Less Than:####\r\n`less_than?` returns true if self is less than n.\r\n\r\n```ruby\r\n3.less_than?(2) #=> false\r\n3.less_than?(3) #=> false\r\n3.less_than?(4) #=> true\r\n```\r\n\r\n####Less Than or Equal To:####\r\n`less_than_or_equal_to?` returns true if self is less than or equal to n.\r\n\r\n```ruby\r\n3.less_than_or_equal_to?(2) #=> false\r\n3.less_than_or_equal_to?(3) #=> true\r\n3.less_than_or_equal_to?(4) #=> true\r\n```\r\n\r\n####Metric Ton in Ounces:####\r\n`metric_ton_in_ounces` and `metric_tons_in_ounces` returns the amount of grams in n metric_tons.\r\n\r\n```ruby\r\n3.metric_tons_in_ounces #=> 3000000\r\n```\r\n\r\n####Megabytes in Bytes:####\r\n`megabyte_in_bytes` and `megabytes_in_bytes` returns the amount of bytes in n megabytes.\r\n\r\n```ruby\r\n3.megabytes_in_bytes #=> 3145728\r\n```\r\n\r\n####Meters in Meters:####\r\n`meter_in_meters` and `meters_in_meters` returns self.\r\n\r\n```ruby\r\n3.meters_in_meters #=> 3\r\n```\r\n\r\n####Miles in Inches:####\r\n`mile_in_inches` and `miles_in_inches` returns the amount of inches in n miles.\r\n\r\n```ruby\r\n3.miles_in_inches #=> 190080\r\n```\r\n\r\n####Millenniums in Seconds:####\r\n`millennium_in_seconds` and `millenniums_in_seconds` returns the amount of seconds in n millenniums.\r\n\r\n```ruby\r\n3.millenniums_in_seconds #=> 94672800000.0\r\n```\r\n\r\n####Milligrams in Grams:####\r\n`milligram_in_grams` and `milligrams_in_grams` returns the amount of grams in n milligrams.\r\n\r\n```ruby\r\n3.milligrams_in_grams #=> 0.003\r\n```\r\n\r\n####Millimeters in Meters:####\r\n`millimeter_in_meters` and `millimeters_in_meters` returns the amount of meters in n millimeters.\r\n\r\n```ruby\r\n3.millimeters_in_meters #=> 0.003\r\n```\r\n\r\n####Minutes in Seconds:####\r\n`minute_in_seconds` and `minutes_in_seconds` returns the amount of seconds in n minutes.\r\n\r\n```ruby\r\n3.minutes_in_seconds #=> 180\r\n```\r\n\r\n####Multiply:####\r\n`multiply` returns the multiplication of two numbers.\r\n\r\n```ruby\r\n4.multiply(2) #=> 8\r\n```\r\n\r\n####Multiple Of:####\r\n`multiple_of?` returns true if a number can be evenly divided by n.\r\n\r\n```ruby\r\n9.multiple_of?(3) #=> true\r\n7.multiple_of?(3) #=> false\r\n```\r\n\r\n####Nautical Miles in Inches:####\r\n`nautical_mile_in_inches` and `nautical_miles_in_inches` returns the amount of inches in n nautical miles.\r\n\r\n```ruby\r\n3.nautical_miles_in_inches #=> 218740.26239999998\r\n```\r\n\r\n####Negative:####\r\n`negative?` returns true if a number is less than zero.\r\n\r\n```ruby\r\n-1.negative? #=> true\r\n1.negative? #=> false\r\n```\r\n\r\n####Ordinal:####\r\n`ordinal` returns the suffix that should be added to a number to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.\r\n\r\n```ruby\r\n\"1\".ordinal  #=> \"th\"\r\n\"2\".ordinal  #=> \"nd\"\r\n\"3\".ordinal  #=> \"rd\"\r\n\"11\".ordinal #=> \"th\"\r\n```\r\n\r\n####Ordinalize:####\r\n`ordinalize` transforms a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.\r\n\r\n```ruby\r\n\"1\".ordinalize  #=> \"1th\"\r\n\"2\".ordinalize  #=> \"2nd\"\r\n\"3\".ordinalize  #=> \"3rd\"\r\n\"11\".ordinalize #=> \"4th\"\r\n```\r\n\r\n####Ounces in Ounces:####\r\n`ounce_in_ounces` and `ounces_in_ounces` returns self.\r\n\r\n```ruby\r\n3.ounces_in_ounces #=> 48\r\n```\r\n\r\n####Outside:####\r\n`outside?` returns true if n is less than start or greater than finish.\r\n\r\n```ruby\r\n3.outside?(4, 5) #=> true\r\n3.outside?(3, 5) #=> false\r\n```\r\n\r\n####Pad:####\r\n`pad` returns a string reprensentation of the number padded with pad_num to a specified length.\r\n\r\n```ruby\r\n3.pad                #=> \"003\"\r\n3.pad(pad_number: 1) #=> \"113\"\r\n3.pad(precision: 4)  #=> \"0003\"\r\n```\r\n\r\n####Pad Precision:####\r\n`pad_precision` returns a string of padded after the '.' to n amount.\r\n\r\n**Options**\r\n *  pad_number: 0\r\n *  precision: 2\r\n *  separator: \"...\"\r\n\r\n```ruby\r\n3.pad_precision                #=> \"3.00\"\r\n3.5.pad_precision              #=> \"3.50\"\r\n3.pad_precision(pad_number: 1) #=> \"3.11\"\r\n```\r\n\r\n####Petabytes in Bytes:####\r\n`petabyte_in_bytes` and `pegabytes_in_bytes` returns the amount of bytes in n petabytes.\r\n\r\n```ruby\r\n3.petabytes_in_bytes #=> 3377699720527872\r\n```\r\n\r\n####Positive:####\r\n`positive?` returns true if a number is greater than zero.\r\n\r\n```ruby\r\n1.positive? #=> true\r\n-1.positive? #=> false\r\n```\r\n\r\n####Pounds in Ounces:####\r\n`pound_in_ounces` and `pounds_in_ounces` returns the amount of ounces in n pounds.\r\n\r\n```ruby\r\n3.pounds_in_ounces #=> 48\r\n```\r\n\r\n####Power:####\r\n`power` returns the nth power of a number.\r\n\r\n```ruby\r\n4.power(2) #=> 16\r\n```\r\n\r\n####Root:####\r\n`root` returns the nth root of a number.\r\n\r\n```ruby\r\n4.root(2) #=> 2\r\n```\r\n\r\n####Seconds in Seconds:####\r\n`second_in_seconds` and `seconds_in_seconds` returns self.\r\n\r\n```ruby\r\n3.seconds #=> 3\r\n```\r\n\r\n####Stones in Ounces:####\r\n`stone_in_ounces` and `stone_in_ounces` returns the amount of ounces in n stones.\r\n\r\n```ruby\r\n3.stones_in_ounces #=> 672\r\n```\r\n\r\n####Subtract:####\r\n`subtract` returns the difference of two numbers.\r\n\r\n```ruby\r\n4.subtract(2) #=> 2\r\n```\r\n\r\n####Terabytes in Bytes:####\r\n`terabyte_in_bytes` and `terabytes_in_bytes` returns the amount of bytes in n terabytes.\r\n\r\n```ruby\r\n3.terabytes_in_bytes #=> 3298534883328\r\n```\r\n\r\n####To Byte:####\r\n`to_byte_in_bytes` converts a byte size from one unit to another unit.\r\n\r\n```ruby\r\n1.to_byte(:byte, :byte)          #=> 1 #B\r\n5120.to_byte(:byte, :kilobyte)   #=> 5 #MB\r\n1.to_byte(:megabyte, :kilobyte)  #=> 1024 #KB\r\n80.to_byte(:megabyte, :gigabyte) #=> 0.078125 #GB\r\n```\r\n\r\n####To Currency:####\r\n`to_currency` converts a number to currency string.\r\n\r\n**Options**\r\n *  precision: 2\r\n *  unit: \"$\"\r\n\r\n```ruby\r\n3.to_currency            #=> \"$3.00\"\r\n3.1.to_currency          #=> \"$3.10\"\r\n3.11.to_currency         #=> \"$3.11\"\r\n3.11111.to_currency      #=> \"$3.11\"\r\n3.to_currency(unit: \"@\") #=> \"@3.00\"\r\n```\r\n\r\n####To Length:####\r\n`to_length` converts a length from one unit to another unit.\r\n\r\n```ruby\r\n12.to_length(:inches, :feet)         #=> 12 #IN\r\n3000.to_length(:meters, :kilometers) #=> 3 #KM\r\n1.to_length(:feet, :centimeters)     #=> 30.479999999999997 #CM\r\n1.to_length(:kilometer, :yards)      #=> 1093.6138888888888 #YDS\r\n```\r\n\r\n####To Mass:####\r\n`to_mass` converts a mass from one unit to another unit.\r\n\r\n```ruby\r\n16.to_mass(:ounces, :pounds)        #=> 1 #LB\r\n1.to_mass(:centigrams, :milligrams) #=> 10 #MG\r\n3.to_mass(:pound, :kilogram)        #=> 1.360776 #KG\r\n1.to_mass(:kilograms, :pounds)      #=> 2.204625 #LB\r\n```\r\n\r\n####To Nearest Value:####\r\n`to_nearest value` return the value in values that is nearest to the number.\r\n\r\n```ruby\r\n5.to_nearest_value([1, 3, 6, 9])           #=> 6\r\n3.5.to_nearest_value([3.0, 3.3, 3.6, 3.9]) #=> 3.6\r\n```\r\n\r\n####To Percantage:####\r\n`to_percentage` converts a number to percentage string.\r\n\r\n**Options**\r\n *  precision: 2\r\n *  unit: \"%\"\r\n\r\n```ruby\r\n3.to_percentage            #=> \"3.00%\"\r\n3.1.to_percentage          #=> \"3.10%\"\r\n3.11.to_percentage         #=> \"3.11%\"\r\n3.11111.to_percentage      #=> \"3.11%\"\r\n3.to_percentage(unit: \"@\") #=> \"3.00@\"\r\n```\r\n\r\n####To Temperature:####\r\n`to_temperature` converts a temperature from one unit to another unit.\r\n\r\n```ruby\r\n100.to_temperature(:celsius, :fahrenheit) #=> 212 #F\r\n212.to_temperature(:fahrenheit, :celsius) #=> 100 #C\r\n212.to_temperature(:fahrenheit, :kelvin)  #=> 373.15 #K\r\n```\r\n\r\n####To Time:####\r\n`to_time` converts a time unit from one unit to another unit.\r\n\r\n```ruby\r\n120.to_time(:seconds, :mintues) #=> 2 #MIN\r\n3.to_time(:hours, :days)        #=> 3 #DAY\r\n2.to_time(:days, :seconds)      #=> 172800 #SEC\r\n1825.to_time(:days, :years)     #=> 4.996577686516085 #YR\r\n```\r\n\r\n####Tons in Ounces:####\r\n`ton_in_ounces` and `ton_in_ounces` returns the amount of ounces in n tons.\r\n\r\n```ruby\r\n3.tons_in_ounces #=> 96000\r\n```\r\n\r\n####Weeks in Seconds:####\r\n`week_in_seconds` and `weeks_in_seconds` returns the amount of seconds in n weeks.\r\n\r\n```ruby\r\n3.weeks_in_seconds #=> 1814400\r\n```\r\n\r\n####Within:####\r\n`within?` determines if another number is approximately equal within a given epsilon\r\n\r\n```ruby\r\n10.006.within?(10, 0.1) #=>  true\r\n```\r\n\r\n####Yards in Inches:####\r\n`yard_in_inches` and `yards_in_inches` returns the amount of inches in n yards.\r\n\r\n```ruby\r\n3.yards_in_inches #=> 108\r\n```\r\n\r\n####Years in Seconds:####\r\n`year_in_seconds` and `years_in_seconds` returns the amount of seconds in n years.\r\n\r\n```ruby\r\n3.years_in_seconds #=> 94672800.0\r\n```\r\n\r\n## Object\r\n\r\n####Array:####\r\n`array?` determines if an object is an array.\r\n\r\n```ruby\r\n[].array?              #=> true\r\n\"Awesome Sting\".array? #=> false\r\n```\r\n\r\n####Blank:####\r\n`blank?` determines if an object is empty or nil.\r\n\r\n```ruby\r\n\"\".blank?              #=> true\r\n\"Awesome Sting\".blank? #=> false\r\n```\r\n\r\n####Boolean:####\r\n`boolean?` determines if an object is an boolean.\r\n\r\n```ruby\r\n1.boolean?     #=> true\r\nfalse.boolean? #=> true\r\n\"foo\".boolean? #=> false\r\n```\r\n\r\n####False:####\r\n`false?` determines if an object is false.\r\n\r\n```ruby\r\nfalse.false? #=> true\r\ntrue.false?  #=> false\r\n```\r\n\r\n####Falsey:####\r\n`falsey?` determines if an object is false, nil, or 0.\r\n\r\n```ruby\r\nfalse.falsey? #=> true\r\ntrue.falsey?  #=> false\r\n0.falsey?     #=> true\r\n```\r\n\r\n####Float:####\r\n`float?` determines if an object is a float.\r\n\r\n```ruby\r\n1.0.float? #=> true\r\n1.float?   #=> false\r\n```\r\n\r\n####Hash:####\r\n`hash?` determines if an object is a hash.\r\n\r\n```ruby\r\n{}.hash? #=> true\r\n[].hash? #=> false\r\n```\r\n\r\n####Integer:####\r\n`integer?` determines if an object is a integer.\r\n\r\n```ruby\r\n1.integer?   #=> true\r\n1.0.integer? #=> false\r\n```\r\n\r\n####Numeric:####\r\n`numeric?` determines if an object is numeric.\r\n\r\n```ruby\r\n1.numeric?     #=> true\r\n1.0.numeric?   #=> true\r\n\"1.0\".numeric? #=> false\r\n```\r\n\r\n####Numeral:####\r\n`numeral?` determines if an object's string value is numeral.\r\n\r\n```ruby\r\n\"-32.50\".numeral? #=> true\r\n\"$2.55\".numeral?  #=> false\r\n```\r\n\r\n####Palindrome:####\r\n`palindrome?` determines if an object is equal when reversed.\r\n\r\n```ruby\r\n\"racecar\".palindrome? #=> true\r\n12321.palindrome?     #=> true\r\n\"example\".palindrome? #=> false\r\n12345.palindrome?     #=> false\r\n```\r\n\r\n####Present:####\r\n`present?` determines if an object is not empty or nil.\r\n\r\n```ruby\r\n\"Awesome Sting\".present? #=> true\r\n\"\".present?              #=> false\r\n```\r\n\r\n####Range:####\r\n`range?` determines if an object is a range.\r\n\r\n```ruby\r\n(1..2).range? #=> true\r\n1.range?      #=> false\r\n```\r\n\r\n####Salvage:####\r\n`salvage` returns a placeholder if object is blank?.\r\n\r\n```ruby\r\n\" \".salvage        #=> \"---\"\r\nnil.salvage(\"bar\") #=> \"bar\"\r\n123.salvage        #=> 123\r\n```\r\n\r\n####String:####\r\n`string?` determines if an object is a string.\r\n\r\n```ruby\r\n\"foo\".string? #=> true\r\n1.string?     #=> false\r\n```\r\n\r\n####Time:####\r\n`time?` determines if an object is a time.\r\n\r\n```ruby\r\nTime.now.time? #=> true\r\n\"foo\".time?    #=> false\r\n```\r\n\r\n####True:####\r\n`true?` determines if an object is true.\r\n\r\n```ruby\r\ntrue.true?  #=> true\r\nfalse.true? #=> false\r\n```\r\n\r\n####Truthy:####\r\n`truthy?` determines if an object is true or 1.\r\n\r\n```ruby\r\ntrue.truthy?  #=> true\r\nfalse.truthy? #=> false\r\n1.truthy?     #=> true\r\n```\r\n\r\n####Try:####\r\n`try` and `try!` invokes the public method whose name goes as first argument just like public_send does, except that if the receiver does not respond to it the call returns nil rather than raising an exception.\r\n\r\n```ruby\r\n\"example\".try(:upcase)      #=> \"EXAMPLE\"\r\n\"example\".try(:fake_method) #=> nil\r\n```\r\n\r\n## Range\r\n\r\n####Combine:####\r\n`combine` returns two concated ranges.\r\n\r\n```ruby\r\n(1..3).combine(7..9) #=> [1, 2, 3, 7, 8, 9]\r\n```\r\n\r\n####Include With Range:####\r\n`include_with_range?` determines if a range includes another range.\r\n\r\n```ruby\r\n(1..5).include?(1..5) # => true\r\n(1..5).include?(2..3) # => true\r\n(1..5).include?(2..6) # => false\r\n```\r\n\r\n####Overlaps:####\r\n`overlaps?` determines if two ranges overlap each other.\r\n\r\n```ruby\r\n(1..5).overlaps?(4..6) # => true\r\n(1..5).overlaps?(7..9) # => false\r\n```\r\n\r\n####Sample:####\r\n`sample` returns a random element from the range.\r\n\r\n```ruby\r\n(1..5).sample # => 4\r\n```\r\n\r\n####Shuffle:####\r\n`shuffle` returns a copy of a shuffled range of elements.\r\n`shuffle!` returns a shuffled range of elements.\r\n\r\n```ruby\r\n(1..5).shuffle  # => [2, 5, 1, 4, 3]\r\n(1..5).shuffle! # => [3, 4, 5, 2, 1]\r\n```\r\n\r\n####Within:####\r\n`within?` determines if one range is within another.\r\n\r\n```ruby\r\n(1..5).within?(2..4) # => true\r\n(1..5).within?(4..6) # => false\r\n```\r\n\r\n## String\r\n\r\n####Any:####\r\n`any?` determines if a string includes a set of string(s).\r\n\r\n```ruby\r\n\"example string\".any?(\"foo\")           #=> false\r\n\"example string\".any?(\"foo\", \"string\") #=> true\r\n```\r\n\r\n####At:####\r\n`at` returns the characters at index position, matching string, or regex.\r\n\r\n```ruby\r\n\"example_string\".at(0)     #=> \"e\"\r\n\"example_string\".at(-2)    #=> \"n\"\r\n\"example_string\".at(1..3)  #=> \"xam\"\r\n\"example_string\".at(\"e_s\") #=> \"e_s\"\r\n\"example_string\".at(/ple/) #=> \"ple\"\r\n\"example_string\".at(99)    #=> nil\r\n```\r\n\r\n####Camelize:####\r\n`camelize` and `camelize!` transfroms a string to camelcase.\r\n\r\n```ruby\r\n\"example_string\".camelize         #=> \"ExampleString\"\r\n\"example_String\".camecase         #=> \"ExampleString\"\r\n\"example_string\".camelize(:lower) #=> \"exampleString\"\r\n\"example_String\".camecase(:lower) #=> \"exampleString\"\r\n```\r\n\r\n####Classify:####\r\n`classify` and `classify!` creates a class name from a string like Rails does for table names to models.\r\n\r\n```ruby\r\n\"example_string\".classify      #=> \"ExampleString\"\r\n\"example_string/test\".classify #=> \"ExampleString::Test\"\r\n\"example_string.test\".classify #=> \"Test\"\r\n```\r\n\r\n####Constantize:####\r\n`constantize` converts a string in an object.\r\n\r\n```ruby\r\n\"Example::String\".constantize #=> Class Object\r\n```\r\n\r\n####Dasherize:####\r\n`dasherize` and `dasherize!` replaces underscores with dashes in the string.\r\n\r\n```ruby\r\n\"example_string\".dasherize #=> \"example-string\"\r\n```\r\n\r\n####Deconstantize:####\r\n`deconstantize` and `deconstantize!` removes the rightmost segment from the constant expression in the string.\r\n\r\n```ruby\r\n\"Example::String\".deconstantize   # => \"Example\"\r\n\"::Example::String\".deconstantize # => \"::Example\"\r\n\"String\".deconstantize            # => \"\"\r\n\"::String\".deconstantize          # => \"\"\r\n\"\".deconstantize                  # => \"\"\r\n```\r\n\r\n####Demodulize:####\r\n`demodulize` and `demodulize!` removes the module part from the expression in the string.\r\n\r\n```ruby\r\n\"Example::String\".demodulize #=> \"String\"\r\n\"String\".demodulize          #=> \"String\"\r\n```\r\n\r\n####Domain:####\r\n`domain` extracts the domain name from a URL.\r\n\r\n```ruby\r\n\"http://www.example.com/fake-page\".domain #=> \"www.example.com\"\r\n\"example string\".domain                   #=> \"example string\"\r\n```\r\n\r\n####Downcase:####\r\n`downcase?` returns true if all characters are lowercase.\r\n\r\n```ruby\r\n\"example\".downcase? #=> true\r\n\"Example\".downcase? #=> false\r\n\"EXAMPLE\".downcase? #=> false\r\n```\r\n\r\n####Ellipsize:####\r\n`ellipsize` truncate a string in the middle.\r\n\r\n**Options**\r\n *  offset: 4\r\n *  separator: \"...\"\r\n\r\n```ruby\r\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ellipsize(30)                   #=> \"0123...WXYZ\"\r\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ellipsize(50)                   #=> \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ellipsize(30, offset: 2)        #=> \"01...YZ\"\r\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ellipsize(30, separator: \"+++\") #=> \"0123+++WXYZ\"\r\n```\r\n\r\n####Exclude:####\r\n`exclude?` returns true if the string does not include the other string.\r\n\r\n```ruby\r\n\"example_string\".exclude?(\"exa\") #=> false\r\n\"example_string\".exclude?(\"xxx\") #=> true\r\n```\r\n\r\n####First:####\r\n`first` returns the first character. If a limit is supplied, returns a substring from the beginning of the string until it reaches the limit value. If the given limit is greater than or equal to the string length, returns a copy of self.\r\n\r\n```ruby\r\n\"example\".first    #=> \"e\"\r\n\"example\".first(0) #=> \"\"\r\n\"example\".first(3) #=> \"exa\"\r\n```\r\n\r\n####Format:####\r\n`format` returns an interpolated string that allows for options.\r\n\r\n```ruby\r\n\"example %s\".format(\"string\")                              #=> \"example string\"\r\n\"test %{one} %{two}\".format(one: \"example\", two: \"string\") #=> \"test example string\"\r\n\"%d + %d\".format([1, 2])                                   #=> \"1 + 2\"\r\n```\r\n\r\n####From:####\r\n`from` returns a substring from the given position to the end of the string. If the position is negative, it is counted from the end of the string.\r\n\r\n```ruby\r\n\"example\".from(0) #=> \"example\"\r\n\"example\".from(3) #=> \"mple\"\r\n```\r\n\r\n####Humanize:####\r\n`humanize` and `humanize!` transforms a string to a human readable string.\r\n\r\n**Options**\r\n *  capitalize: true\r\n\r\n```ruby\r\n\"ExampleString\".humanize                     #=> \"Example string\"\r\n\"_example_string_id\".humanize                #=> \"Example string\"\r\n\"example_string\".humanize(capitalize: false) #=> \"example string\"\r\n```\r\n\r\n####Indent:####\r\n`indent` and `indent!` indents the lines in the receiver.\r\n\r\n```ruby\r\n\"example\".indent(2)       #=> \"  example\"\r\n\"example\".indent(2, \"\\t\") #=> \"\\t\\texample\"\r\n```\r\n\r\n####Index all:####\r\n`index_all` returns the index values of matching patterns.\r\n\r\n```ruby\r\n\"012324507654301243\".index_all(0)                           #=> [0,7,13]\r\n\"the apple is the best fruit in the world\".index_all(\"the\") #=> [0,13,31]\r\n\"asdfasdfasdf\".index_all(/sd/)                              #=> [1,5,9]\r\n```\r\n\r\n####Labelize:####\r\n`labelize` and `labelize!` transforms a string to a human readable string.\r\n\r\n```ruby\r\n\"example string\".labelize     #=> \"Example string\"\r\n\"_example_string_id\".labelize #=> \"Example string ID\"\r\n\"ExampleString\".labelize      #=> \"Example string\"\r\n```\r\n\r\n####Last:####\r\n`last` returns the last character of the string. If a limit is supplied, returns a substring from the end of the string until it reaches the limit value (counting backwards). If the given limit is greater than or equal to the string length, returns a copy of self.\r\n\r\n```ruby\r\n\"example\".last     #=> \"e\"\r\n\"example\".last(0)  #=> \"\"\r\n\"example\".first(3) #=> \"ple\"\r\n```\r\n\r\n####Mixcase:####\r\n`mixcase?` returns true if characters are mixedcase.\r\n\r\n```ruby\r\n\"Example\".mixedcase? #=> true\r\n\"EXAMPLE\".mixedcase? #=> false\r\n\"example\".mixedcase? #=> false\r\n```\r\n\r\n####Ordinal:####\r\n`ordinal` returns the suffix that should be added to a number to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.\r\n\r\n```ruby\r\n\"1\".ordinal  #=> \"th\"\r\n\"2\".ordinal  #=> \"nd\"\r\n\"3\".ordinal  #=> \"rd\"\r\n\"11\".ordinal #=> \"th\"\r\n```\r\n\r\n####Ordinalize:####\r\n`ordinalize` transforms a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.\r\n\r\n```ruby\r\n\"1\".ordinalize  #=> \"1th\"\r\n\"2\".ordinalize  #=> \"2nd\"\r\n\"3\".ordinalize  #=> \"3rd\"\r\n\"11\".ordinalize #=> \"4th\"\r\n```\r\n\r\n####Parameterize:####\r\n`parameterize` and `parameterize!` makes string suitable for a dashed url parameter string.\r\n\r\n```ruby\r\n\"example_string\".parameterize      #=> \"example-string\"\r\n\"example_string\".parameterize(\"?\") #=> \"example?string\"\r\n```\r\n\r\n####Pollute:####\r\n`pollute` and `pollute!` pollutes the space between every letter in a string, so it will be exempt from any impending string searches.\r\n\r\n```ruby\r\n\"test\".pollute      #=> \"t^--^--^e^--^--^s^--^--^t^--^--^\"\r\n\"test\".pollute(\"-\") #=> \"t-e-s-t-\"\r\n```\r\n\r\n####Pop:####\r\n`pop` returns the last character of a string.\r\n\r\n```ruby\r\n\"test\".pop #=> \"t\"\r\n```\r\n\r\n####Push:####\r\n`push` concats string to self.\r\n\r\n```ruby\r\n\"test\".push(\"er\") #=> \"tester\"\r\n```\r\n\r\n####Remove:####\r\n`remove` and `remove!` removes every instance of a string.\r\n\r\n```ruby\r\n\"this thing that thing\".remove(\"thing\")        #=> \"this  that \"\r\n\"this thing that thing\".remove(1..3)           #=> \"t thing that thing\"\r\n\"this thing that them\".remove(\"thing\", \"them\") #=> \"this  that \"\r\n\"this thing that them\".remove(\"thing\", 1..3)   #=> \"t  that them\"\r\n```\r\n\r\n####Remove Tags:####\r\n`remove_tags` and `remove_tags!` removes HTML tags from a string.\r\n\r\n```ruby\r\n\"example\".strip_tags                                   #=> \"example\"\r\n\"<a href='http://example.com'>click</a>\".strip_tags    #=> \"click\"\r\n\"this is <b>bold</b> and <em>emphatic</em>\".strip_tags #=> \"this is bold and emphatic\"\r\n```\r\n\r\n####Sample:####\r\n`sample` and `sample!` deletes a random value and returns that value.\r\n\r\n```ruby\r\n\"this thing that\".sample            #=> \"thing\"\r\n\"this thing that\".sample(\" thing \") #=> \"that\"\r\n```\r\n\r\n####Shift:####\r\n`shift` and `shift!` removes the first instance of a string.\r\n\r\n```ruby\r\n\"this thing that thing\".shift                 #=> \"t\"\r\n\"this thing that thing\".shift(\"thing\")        #=> \"this  that thing\"\r\n\"this thing that thing\".shift(\"this\", \"that\") #=> \" thing  thing\"\r\n```\r\n\r\n####Shuffle:####\r\n`shuffle` and `shuffle!` randomizes the characters in a string.\r\n\r\n```ruby\r\n\"ruby rules\".sample  #=> \"e lybrsuur\"\r\n\"ruby rules\".sample! #=> \"rblse syru\"\r\n```\r\n\r\n####Sift:####\r\n`sift` and `sift!` returns a string matching any character in a pattern.\r\n\r\n```ruby\r\n\"qa2ws3ed4rf5tg6yh7uj8ik9ol\".sift(\"0123456789\")          #=> \"23456789\"\r\n\"qa2ws3ed4rf5tg6yh7uj8ik9ol\".sift(0..9)                  #=> \"23456789\"\r\n\"qa2ws3ed4rf5tg6yh7uj8ik9ol\".sift([0,1,2,3,4,5,6,7,8,9]) #=> \"23456789\"\r\n```\r\n\r\n####Slugify:####\r\n`slugify` and `slugify!` generates a permalink-style string, with odd characters removed.\r\n\r\n```ruby\r\n\"example\".slugify                  #=> \"example\"\r\n\"example string\".slugify           #=> \"example-string\"\r\n\"Example string @@@ test!\".slugify #=> \"example-string-test\"\r\n```\r\n\r\n####Sort:####\r\n`sort` and `sort!` sorts a string.\r\n\r\n```ruby\r\n\"adbec\".sort #=> \"abcde\"\r\n```\r\n\r\n####Squish:####\r\n`squish` and `squish!` returns the string, first removing all whitespace on both ends of the string, and then changing remaining consecutive whitespace groups into one space each.\r\n\r\n```ruby\r\n\"example    string\".squish        #=> \"example string\"\r\n\"example  \\n   \\t  string\".squish #=> \"example string\"\r\n\"   example    string   \".squish  #=> \"example string\"\r\n```\r\n\r\n####Titleize:####\r\n`titleize` and `titleize!` capitalizes each word in a string.\r\n\r\n```ruby\r\n\"example string\".titleize     #=> \"Example String\"\r\n\"_example_string_id\".titleize #=> \"Example String\"\r\n\"ExampleString\".titleize      #=> \"Example String\"\r\n```\r\n\r\n####To:####\r\n`to` returns a substring from the beginning of the string to the given position. If the position is negative, it is counted from the end of the string.\r\n\r\n```ruby\r\n\"example\".to(0)  #=> \"example\"\r\n\"example\".to(3)  #=> \"exam\"\r\n\"example\".to(-2) #=> \"exampl\"\r\n```\r\n\r\n####Truncate:####\r\n`truncate` a given text after a given length if text is longer than length.\r\n\r\n**Options**\r\n *  omission: \"...\"\r\n *  separator: \" \"\r\n\r\n```ruby\r\n\"example string\".truncate(3)                          #=> \"...\"\r\n\"example string\".truncate(6)                          #=> \"exa...\"\r\n\"example string\".truncate(12, separator: \" \")         #=> \"example...\"\r\n\"example string\".truncate(13, omission: \"... (more)\") #=> \"exa... (more)\"\r\n\"example string\".truncate(15)                         #=> \"example string\"\r\n```\r\n\r\n####Truncate Words:####\r\n`truncate_words` truncates a given text after a given number of words.\r\n\r\n**Options**\r\n *  omission: \"...\"\r\n *  separator: \" \"\r\n\r\n```ruby\r\n\"example string test\".truncate_words(1)                                                                #=> \"example...\"\r\n'Once<br>upon<br>a<br>time<br>in<br>a<br>world'.truncate_words(5, separator: '<br>')                   #=> \"Once<br>upon<br>a<br>time<br>in...\"\r\n'And they found that many people were sleeping better.'.truncate_words(5, omission: '... (continued)') #=> \"And they found that many... (continued)\"\r\n```\r\n\r\n####Underscore:####\r\n`underscore` and `underscore!` transforms a string to snakecase.\r\n\r\n```ruby\r\n\"ExampleString\".underscore       #=> \"example_string\"\r\n\"exampleString\".underscore       #=> \"example_string\"\r\n\"ExampleString::Test\".underscore #=> \"example_string/test\"\r\n```\r\n\r\n####Unpollute:####\r\n`unpollute` and `unpollute!` removes the default or custom pollution character. Can also be used to remove an unwanted character.\r\n\r\n```ruby\r\n\"t^--^--^e^--^--^s^--^--^t^--^--^\".unpollute #=> \"test\"\r\n\"t-e-s-t-\".unpollute                         #=> \"test\"\r\n```\r\n\r\n####Upcase:####\r\n`upcase?` returns true if all characters are uppercase.\r\n\r\n```ruby\r\n\"EXAMPLE\".upcase? #=> true\r\n\"example\".upcase? #=> false\r\n\"Example\".upcase? #=> false\r\n```\r\n\r\n####Unshift:####\r\n`unshift` and `unshift!` prepends string(s) to self.\r\n\r\n```ruby\r\n\"this thing that thing\".unshift(\"thing \")         #=> \"thing this thing that thing\"\r\n\"this thing that thing\".unshift(\"this \", \"that \") #=> \"this that this thing that thing\"\r\n```\r\n\r\n## Time\r\n\r\n*Note:* also works with Date class.\r\n\r\n####Format:####\r\n`format` converts a Date or Time object to format it using a human readable string.\r\n\r\n**Rules**\r\n *  Characters: a-z 0-9 _\r\n *  Characters can only be used to generate a format part\r\n\r\n```ruby\r\nDate.today.format(\"year\")                                #=> \"2014\"\r\nTime.now.format(\"month_name day, year hour:minute ampm\") #=> \"January 09, 2014 02:31 pm\"\r\n```\r\n\r\n| Name | Key | Equivalent `strftime` | Result |\r\n| --- | --- | --- | --- |\r\n| Month - digits zero-padded | `m` or `month` or `month_padded` | %m | (01..12) |\r\n| Month - digits unpadded | `mm` or `Month` or `month_unpadded` | %-m | (1..12) |\r\n| Month - digits blank-padded | `mmm` or `MONTH` or `day_blank` | %_m | ( 1..12) |\r\n| Month - name | `mmmm` or `month_name` | %B | January |\r\n| Month - name abbreviated | `mmmmm` or `month_name_abbr` | %b | Jan |\r\n| Day - digits zero-padded | `d` or `day` or `day_padded` | %d | (01..31) |\r\n| Day - digits unpadded | `dd` or `Day` or `day_unpadded` | %-d | (1..31) |\r\n| Day - digits blank-padded | `ddd` or `DAY` or `day_blank` | %_d | ( 1..31) |\r\n| Day - digits of the year | `dddd` or `day_of_the_year` | %j | (001..366) |\r\n| Week - starting monday | `wwwww` or `week` | %M | (00..53) |\r\n| Week - starting sunday | `wwwwww` or `weekday_offset` | %M | (00..53) |\r\n| Weekday - starting monday | `w` or `weekday` | %M | (1..7) |\r\n| Weekday - starting sunday | `ww` or `weekday` | %M | (0..6) |\r\n| Weekday - name | `www` or `weekday_name` | %M | Sunday |\r\n| Weekday - name abbreviated | `wwww` or `weekday_name_abbr` | %M | Sun |\r\n| Year - digits two | `yy` or `yr` | %y | (00..99) |\r\n| Year - digits four | `yyyy` or `year` | %Y | 1999 |\r\n| Hour - digits zero-padded | `h` or `hour` or `hour_padded` | %H | (00..23) |\r\n| Hour - digits blank-padded | `hh` or `HOUR` or `hour_blank` | %k | ( 0..23) |\r\n| Hour - digits zero-padded | `hhh` or `hour_imperical` or `hour_imperical_padded` | %I | (01..12) |\r\n| Hour - digits blank-padded | `hhhh` or `HOUR_IMPERICAL` or `hour_imperical_blank` | %l | ( 1..12) |\r\n| Minute - minute | `n` or `minute` | %M | (00..59) |\r\n| Second - second | `s` or `second` | %S | (00..60) |\r\n| Meridian - lowercase | `ampm` or `meridian` | %p | am..pm |\r\n| Meridian - uppercase | `AMPM` or `MERIDIAN` | %P | AM..PM |\r\n| Time Zone - time zone | `z` or `time_zone` | %z | +0900 |\r\n| Time Zone - hour and minute offset | `zz` or `time_zone_offset` | %z | +09:00 |\r\n| Time Zone - hour, minute and second offset | `zzz` or `time_zone_offset_full` | %z | +09:00:00 |\r\n\r\n####To Format / Stamp:####\r\n`to_format` and `stamp` converts a Date or Time object to a predefined format.\r\n\r\n**For a full list check out the time extention file.**\r\n\r\n```ruby\r\nTime.now.to_format(:year) #=> \"2014\"\r\nTime.now.stamp(:datetime) #=> \"January 09, 2014 02:31 pm\"\r\n```\r\n\r\n| Name | Key | Equivalent `strftime` | Result |\r\n| --- | --- | --- | --- |\r\n| Month - digits zero-padded | `:month` or `:month_padded` | %A | (01..12) |\r\n| Month - digits unpadded | `:month_unpadded` | %a | (1..12) |\r\n| Month - digits blank-padded | `:month_blank` | %a | ( 1..12) |\r\n| Month - name | `:month_name` | %A | January |\r\n| Month - name abbreviated | `:month_name_abbr` | %a | Jan |\r\n| Month - digits zero-padded | `:month_year` or `:month_padded_year` | %A | (01..12) 2015 |\r\n| Month - digits unpadded | `:month_unpadded_year` | %a | (1..12) 2015 |\r\n| Month - digits blank-padded | `:month_blank_year` | %a | ( 1..12) 2015 |\r\n| Month - name | `:month_name_year` | %A | January 2015 |\r\n| Month - name abbreviated | `:month_name_abbr_year` | %a | Jan 2015 |\r\n| Weekday - digits zero-padded | `:weekday_padded` | %A | (01..31) |\r\n| Weekday - digits unpadded | `:weekday_unpadded` | %a | (1..31) |\r\n| Weekday - digits blank-padded | `:weekday_blank` | %a | ( 1..31) |\r\n| Weekday - name | `:weekday_name` | %A | Sunday |\r\n| Weekday - name abbreviated | `:weekday_name_abbr` | %a | Sun |\r\n| Year - digits two | `:yr` | %y | (00..99) |\r\n| Year - digits four | `:year` | %Y | 1999 |\r\n| Hour - digits zero-padded | `:hour` or `:hour_padded` | %H | (00..23) |\r\n| Hour - digits blank-padded | `:hour_blank` | %k | ( 0..23) |\r\n| Hour - digits zero-padded imperical | `:hour_imperical_padded` | %I | (01..12) |\r\n| Hour - digits blank-padded imperical | `:hour_imperical_blank` | %l | ( 1..12) |\r\n| Minute - minute | `:minute` | %M | (00..59) |\r\n| Second - second | `:second` | %S | (00..60) |\r\n| Time Zone - time zone | `:time_zone` | %z | +0900 |\r\n| Time Zone - hour and minute offset | `:time_zone_offset` | %z | +09:00 |\r\n| Time Zone - hour, minute and second offset | `:time_zone_offset_full` | %z | +09:00:00 |\r\n| Date - name | `:date` | %B %-d, %Y | January 9, 2014 |\r\n| Date - name abbreviated | `:date_abbr` | %b %-d, %Y | Jan 9, 2014 |\r\n| Date - iso | `:date_iso` | %Y-%m-%d | 2014-01-09 |\r\n| Datetime - name | `:datetime` | %B %-d, %Y %H:%M | January 9, 2014 00:31 |\r\n| Datetime - name abbreviated | `:datetime_abbr` | %b %-d, %Y %H:%M | Jan 9, 2014 00:31 |\r\n| Datetime - iso | `:datetime_iso` | %Y-%m-%d %H:%M | 2014-01-09 00:31 |\r\n| Datetime - name imperical | `:datetime_imperical` | %B %-d, %Y %H:%M | January 9, 2014 12:31 am |\r\n| Datetime - name abbreviated imperical | `:datetime_imperical_abbr` | %b %-d, %Y %H:%M | Jan 9, 2014 12:31 am |\r\n| Datetime - iso imperical | `:datetime_imperical_iso` | %Y-%m-%d %H:%M | 2014-01-09 12:31 am |\r\n| Datetime - name time zone | `:datetime_tzn` | %B %-d, %Y %H:%M %Z | January 9, 2014 00:31 UTC |\r\n| Datetime - name abbreviated time zone | `:datetime_abbr_tzn` | %b %-d, %Y %H:%M %Z | Jan 9, 2014 00:31 UTC |\r\n| Datetime - iso time zone | `:datetime_iso_tzn` | %Y-%m-%d %H:%M %z | 2014-01-09 00:31 +0000 |\r\n| Datetime - name imperical time zone | `:datetime_imperical_tzn` | %B %-d, %Y %H:%M %Z | January 9, 2014 12:31 am UTC |\r\n| Datetime - name abbreviated imperical time zone | `:datetime_imperical_abbr_tzn` | %b %-d, %Y %H:%M %Z | Jan 9, 2014 12:31 am UTC |\r\n| Datetime - iso imperical time zone | `:datetime_imperical_iso_tzn` | %Y-%m-%d %H:%M %z | 2014-01-09 12:31 am +0000 |\r\n| Day - name | `:day` | %B %-d | January 9 |\r\n| Day - name abbreviated | `:day_abbr` | %b %-d | Jan 9 |\r\n| Day - iso | `:day_iso` | %m-%d | 01-09 |\r\n| Daytime - name | `:daytime` | %B %-d %H:%M | January 9 00:31 |\r\n| Daytime - name abbreviated | `:daytime_abbr` | %b %-d %H:%M | Jan 9 00:31 |\r\n| Daytime - iso | `:daytime_iso` | %m-%d %H:%M | 01-09 00:31 |\r\n| Daytime - name imperical | `:daytime_imperical` | %B %-d %H:%M | January 9 12:31 am |\r\n| Daytime - name abbreviated imperical | `:daytime_imperical_abbr` | %b %-d %H:%M | Jan 9 12:31 am |\r\n| Daytime - iso imperical | `:daytime_imperical_iso` | %m-%d %H:%M | 01-09 12:31 am |\r\n| Time - zero-padded | `:time` or `:time_padded` | %H:%M | 00:31 |\r\n| Time - blank-padded | `:time_blank` | %k:%M %z | 0:31 |\r\n| Time - zero-padded imperical | `:time_imperical` or `:time_imperical_padded` | %I:%M %P | 07:31 |\r\n| Time - blank-padded imperical | `:time_imperical_blank` | %l:%M %P | 7:31 |\r\n| Time - with time zone | `:time_tz` | %H:%M %z | 00:31 +0000 |\r\n| Time - with time zone name | `:time_tzn` | %H:%M %Z | 00:31 UTC |\r\n\r\n## Contributing\r\n\r\nYour contribution is welcome.\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}